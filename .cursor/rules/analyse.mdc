---
description: Analyse Code
---

Analyze the code to ensure compliance with all guidelines. Follow this checklist:

### Code Style and Structure Check
- [ ] Code is concise and uses TypeScript correctly
- [ ] Uses functional and declarative patterns (no classes)
- [ ] Code is properly modularized with minimal duplication
- [ ] Variable names follow conventions (e.g., isLoading, hasError)
- [ ] Files follow structure: exports, subcomponents, helpers, types

### State Management Check
- [ ] Zustand is used for global state
- [ ] Stores are in src/stores directory
- [ ] Persist middleware used where needed
- [ ] Stores are small and focused
- [ ] Uses selectors for derived state
- [ ] Local state used appropriately

### Data Fetching Check
- [ ] TanStack Query used for API calls
- [ ] Custom hooks created for data fetching
- [ ] Proper error handling implemented
- [ ] Loading states handled correctly
- [ ] Optimistic updates used where appropriate
- [ ] Cache invalidation implemented
- [ ] Prefetching used where beneficial

### Component Architecture Check
- [ ] Components are reusable with clear interfaces
- [ ] React Suspense used for code splitting
- [ ] Skeleton loading states implemented with Shadcn UI
- [ ] Dedicated loading components exist
- [ ] Compound components used for complex UIs
- [ ] Components follow single responsibility
- [ ] Error boundaries implemented
- [ ] TypeScript types/interfaces properly used

### Loading States and Suspense Check
- [ ] React Suspense implemented for:
  - [ ] Dynamic imports
  - [ ] Route segment loading.tsx files
  - [ ] Nested Suspense boundaries
  - [ ] Server component streaming
- [ ] Skeleton states:
  - [ ] Match content shape
  - [ ] Use Shadcn UI components
  - [ ] Have pulsing animations
  - [ ] Match content dimensions
  - [ ] Group related elements
- [ ] Loading best practices:
  - [ ] No layout shifts
  - [ ] Consistent spacing
  - [ ] Progressive loading for lists
  - [ ] Staggered animations
  - [ ] Minimum 300ms display

### Performance Check
- [ ] Code splitting implemented
- [ ] React.memo used for expensive computations
- [ ] TanStack Query caching configured
- [ ] Key props used correctly in lists
- [ ] Virtualization for long lists
- [ ] Image optimization implemented
- [ ] Lazy loading used appropriately

### Accessibility Check
- [ ] WCAG 2.1 guidelines followed
- [ ] ARIA labels used correctly
- [ ] Keyboard navigation works
- [ ] Color contrast meets standards
- [ ] Focus management implemented

### Design Check
- [ ] UI/UX meets level 5 criteria
- [ ] Accessibility meets level 5 criteria
- [ ] Performance meets level 5 criteria
- [ ] Responsiveness meets level 5 criteria
- [ ] Visual consistency meets level 5 criteria
- [ ] Navigation meets level 5 criteria
- [ ] Mobile optimization meets level 5 criteria
- [ ] Code quality meets level 5 criteria

### Contributing Guidelines Check
- [ ] Uses inline CSS with Tailwind and Shadcn UI
- [ ] 'use client' directive used correctly
- [ ] Lucide React icons used exclusively
- [ ] Stock photos configured correctly
- [ ] No hardcoded colors (uses tokens)
- [ ] Responsive design implemented
- [ ] No code duplication
- [ ] Files are not too large
- [ ] Consistent with app's style

### Action Items
If any checks fail, create tasks in the following format:

```typescript
interface Task {
  id: string;
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  category: 'style' | 'state' | 'data' | 'component' | 'loading' | 'performance' | 'accessibility' | 'design' | 'guidelines';
  relatedFiles: string[];
}
```

Example task:
```json
{
  "id": "TASK-001",
  "title": "Implement Skeleton Loading States",
  "description": "Add Shadcn UI skeleton components for content loading states in UserProfile component",
  "priority": "high",
  "category": "loading",
  "relatedFiles": ["app/components/UserProfile.tsx", "app/loading.tsx"]
}
```

Generate tasks for each failed check to bring the code into compliance with general.mdc guidelines. Write this list of tasks in @.cursortasks file.
