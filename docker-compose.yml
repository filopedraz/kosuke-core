services:
  postgres:
    image: postgres:16.4-alpine
    container_name: next_saas_starter_postgres
    env_file:
      - .env
    ports:
      - '54323:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    container_name: next_saas_starter_minio
    env_file:
      - .env
    ports:
      - '9005:9000'
      - '9006:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  nextjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: next_saas_starter_nextjs
    env_file:
      - .env
    environment:
      - AGENT_SERVICE_URL=http://agent:8000
      - WEBHOOK_SECRET=dev-secret-change-in-production
    ports:
      - '3001:3000'
    volumes:
      - next_build_cache:/app/.next/cache
    depends_on:
      - postgres
      - minio
      - agent
    restart: unless-stopped

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    container_name: agentic_coding_pipeline
    ports:
      - '8001:8000'
    volumes:
      - ./agent:/app:cached
      - ./projects:/app/projects:cached
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./agent/.env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - NEXTJS_URL=http://host.docker.internal:3000
      - WEBHOOK_SECRET=dev-secret-change-in-production
      - HOST_WORKSPACE_DIR=${PWD} # Pass the host workspace directory for Docker-in-Docker volume mounting
    depends_on:
      - postgres
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'python',
          '-c',
          "import requests; requests.get('http://localhost:8000/api/health/simple')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  minio_data:
  next_build_cache:
